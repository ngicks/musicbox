package main

import (
	"bytes"
	"flag"
	"html/template"
	"io"
	"os"
	"strings"
)

var (
	pkg    = flag.String("pkg", "", "package name for generated go code.")
	name   = flag.String("name", "Dir", "prefix for generated types. It'll generate <prefix>Set, <prefix>Handle, <prefix>Contents.")
	fields = flag.String("fields", "", "comma separated fields names for generated types.")
	out    = flag.String("o", "--", "path to output file. `--` means stdout.")
)

type tempInput struct {
	PkgName string
	Name    string
	Fields  []string
}

var genTemp = template.Must(template.New("foo").Parse(`// The code is generated by github.com/ngicks/musicbox/composeloader/cmd/gentypes
// DO NOT EDIT.
package {{.PkgName}}

import (
	"io/fs"

	"github.com/ngicks/musicbox/storage"
	"github.com/spf13/afero"
)

func Prepare{{.Name}}(
	base afero.Fs,
	pathSet {{.Name}}Set,
	initialContents {{.Name}}Contents,
) ({{.Name}}Handle, error) {
	return storage.PrepareHandle[{{.Name}}Set, {{.Name}}Handle](base, pathSet, initialContents)
}

type {{.Name}}Set struct {
{{range $index, $element := .Fields}}	{{$element}} string
{{end -}}
}

type {{.Name}}Handle struct {
{{range $index, $element := .Fields}}	{{$element}} afero.Fs
{{end -}}
}

type {{.Name}}Contents struct {
{{range $index, $element := .Fields}}	{{$element}} fs.FS
{{end -}}
}
`))

func main() {
	flag.Parse()

	if *pkg == "" {
		panic("pkg is not specified")
	}
	if *fields == "" {
		panic("fields is not specified")
	}

	fieldsSlice := strings.Split(*fields, ",")

	buf := new(bytes.Buffer)

	err := genTemp.Execute(buf, tempInput{
		PkgName: *pkg,
		Name:    *name,
		Fields:  fieldsSlice,
	})
	if err != nil {
		panic(err)
	}

	var outFile *os.File
	if *out == "-" || *out == "--" {
		outFile = os.Stdout
	} else {
		f, err := os.Create(*out)
		if err != nil {
			panic(err)
		}
		defer func() { _ = f.Close() }()
		outFile = f
	}

	_, err = io.Copy(outFile, buf)
	if err != nil {
		panic(err)
	}
}
